{"version":3,"sources":["logo.svg","components/widget.js","components/material-ui-styles.js","components/kinesis-webrtc.js","App.js","reportWebVitals.js","index.js"],"names":["Widget","view","children","Container","Paper","elevation","Box","p","m","useStyles","makeStyles","theme","root","display","title","flexGrow","appBarHeader","zIndex","drawer","footer","textAlign","width","flexShrink","drawerHeaderContainer","drawerPaper","drawerContainer","overflow","content","padding","spacing","widgetContainer","OPTIONS","STUN_TURN","TURN_ONLY","DISABLED","MASTER","VIEWER","WIDESCREEN","FULLSCREEN","state","store","accessKey","secretAccessKey","sessionToken","region","role","channelName","clientId","Math","random","toString","substring","toUpperCase","endpoint","sendVideo","sendAudio","openDataChannel","resolution","natTraversal","useTrickleICE","messageToSend","playerIsStarted","signalingClient","localStream","localView","remoteView","dataChannel","peerConnectionStatsInterval","peerConnectionByClientId","dataChannelByClientId","receivedMessages","KinesisWebRTC","useRef","useEffect","Object","entries","key","localStorageValue","localStorage","getItem","includes","ConfigurationForm","VideoPlayers","classes","TextField","id","label","onChange","e","updateState","target","value","style","FormControl","className","formControl","InputLabel","Select","labelId","MenuItem","FormControlLabel","control","Checkbox","color","checked","labelPlacement","Button","variant","onClick","stopPlayer","startPlayer","ref","autoPlay","playsInline","controls","muted","sendMessage","fullWidth","multiline","rowsMax","size","disabled","console","log","startPlayerForMaster","startPlayerForViewer","a","kinesisVideoClient","KinesisVideo","correctClockSkew","accessKeyId","describeSignalingChannel","ChannelName","promise","describeSignalingChannelResponse","channelARN","ChannelInfo","ChannelARN","getSignalingChannelEndpoint","SingleMasterChannelEndpointConfiguration","Protocols","Role","getSignalingChannelEndpointResponse","endpointsByProtocol","ResourceEndpointList","reduce","endpoints","Protocol","ResourceEndpoint","SignalingClient","channelEndpoint","WSS","systemClockOffset","config","credentials","kinesisVideoSignalingChannelsClient","KinesisVideoSignalingChannels","HTTPS","getIceServerConfig","getIceServerConfigResponse","iceServers","push","urls","IceServerList","forEach","iceServer","Uris","username","Username","credential","Password","configuration","iceTransportPolicy","ideal","height","constraints","video","audio","navigator","mediaDevices","getUserMedia","current","srcObject","error","on","offer","remoteClientId","peerConnection","RTCPeerConnection","createDataChannel","ondatachannel","event","channel","onmessage","message","timestamp","Date","toISOString","loggedMessage","data","setInterval","getStats","then","onStatsReport","addEventListener","candidate","sendIceCandidate","sendSdpAnswer","localDescription","streams","getTracks","track","addTrack","setRemoteDescription","createAnswer","offerToReceiveAudio","offerToReceiveVideo","setLocalDescription","addIceCandidate","open","createOffer","sendSdpOffer","answer","remoteStream","close","keys","stop","clearInterval","stopPlayerForMaster","stopPlayerForViewer","report","send","localKey","setItem","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","Fragment","document","getElementById"],"mappings":"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","file":"static/js/main.855d7106.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React from 'react';\nimport { view } from '@risingstack/react-easy-state';\nimport 'cross-fetch/polyfill';\n\nimport Container from '@material-ui/core/Container';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\n\nconst Widget = view(({ children }) => {\n  return (\n    <Container>\n      <Paper elevation={3}>\n        <Box p={2} m={1}>\n          {children}\n        </Box>\n      </Paper>\n    </Container>\n  );\n});\n\nexport default Widget; ","import { makeStyles } from '@material-ui/core/styles';\n\nconst drawerWidth = 250;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  title: {\n    flexGrow: 1,\n  },\n  appBarHeader: {\n    zIndex: theme.zIndex.drawer + 1,\n  },\n  footer: {\n    textAlign: 'center'\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerHeaderContainer: {\n    textAlign: 'center',\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerContainer: {\n    overflow: 'auto',\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(1),\n  },\n  widgetContainer: {\n    p: 4\n  }\n}));\n\nexport default useStyles;","import React, { useEffect, useRef } from 'react';\nimport { store, view } from '@risingstack/react-easy-state';\nimport KinesisVideo from 'aws-sdk/clients/kinesisvideo';\nimport KinesisVideoSignalingChannels from 'aws-sdk/clients/kinesisvideosignalingchannels';\nimport { SignalingClient } from 'amazon-kinesis-video-streams-webrtc';\nimport Button from '@material-ui/core/Button';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport TextField from '@material-ui/core/TextField';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Widget from './widget.js';\nimport useStyles from './material-ui-styles';\n\n// Used to determine / validate options in form components:\nconst OPTIONS = {\n  TRAVERSAL: {\n    STUN_TURN: 'stunTurn',\n    TURN_ONLY: 'turnOnly',\n    DISABLED: 'disabled'\n  },\n  ROLE: {\n    MASTER: 'MASTER',\n    VIEWER: 'VIEWER'\n  },\n  RESOLUTION: {\n    WIDESCREEN: 'widescreen',\n    FULLSCREEN: 'fullscreen'\n  }\n};\n\n// Stores state across components (react-easy-state is super easy to use!)\nconst state = store({\n  // These are config params set by the user:\n  accessKey: '',\n  secretAccessKey: '',\n  sessionToken: '',\n  region: 'us-west-2',\n  role: OPTIONS.ROLE.MASTER,\n  channelName: 'ScaryTestChannel',\n  clientId: getRandomClientId(),\n  endpoint: null,\n  sendVideo: true,\n  sendAudio: true,\n  openDataChannel: true,\n  resolution: OPTIONS.RESOLUTION.WIDESCREEN,\n  natTraversal: OPTIONS.TRAVERSAL.STUN_TURN,\n  useTrickleICE: false,\n  messageToSend: '',\n  playerIsStarted: false,\n\n  // These are set when user starts video; a few of them are only used when you start the stream as MASTER:\n  signalingClient: null,\n  localStream: null,\n  localView: null,\n  remoteView: null,\n  dataChannel: null,\n  peerConnectionStatsInterval: null,\n  peerConnectionByClientId: {},\n  dataChannelByClientId: [],\n  receivedMessages: '',\n\n});\n\n//------------------------------------------------------------------------------\nconst KinesisWebRTC = view(() => {\n\n  // In order to modify properties of our <video> components, we need a reference\n  // to them in the DOM; first, we declare set them up with the useRef hook. \n  // Later, when we render the <VideoPlayers/> component, we include this reference\n  // in the component definition. Finally, we can reference the object properties\n  // by state.localView.current.<PROPERTY>:\n  state.localView = useRef(null);\n  state.remoteView = useRef(null);\n\n  // When widget first loads, get saved state values from localStorage:\n  useEffect(() => {\n    for (const [key] of Object.entries(state)) {\n      var localStorageValue = localStorage.getItem(`kvs-widget-${key}`);\n      if (localStorageValue) {\n        // Convert true or false strings to boolean (needed for checkboxes):\n        if ([\"true\", \"false\"].includes(localStorageValue)) {\n          localStorageValue = localStorageValue === \"true\";\n        }\n        //console.log(`Setting ${key} = `, localStorageValue);\n        state[key] = localStorageValue;\n      }\n    }\n  }, []);\n\n  return (\n    <Widget>\n      <h2>Kinesis WebRTC</h2>\n      <ConfigurationForm/>\n      <br /><br />\n      {state.playerIsStarted ? <VideoPlayers /> : null }\n    </Widget>\n  );\n  \n});\n\n//------------------------------------------------------------------------------\nconst ConfigurationForm = view(() => {\n\n  const classes = useStyles();\n  return (\n    <Widget>\n      <h3>AWS Credentials</h3>\n      <TextField\n        id=\"accessKey\"\n        label=\"Access Key\"\n        onChange={(e) => updateState('accessKey', e.target.value)}\n        value={state.accessKey} \n        style = {{width: \"50%\"}}\n      />\n      <br/>\n      <TextField\n        id=\"secretKey\"\n        label=\"Secret Key\"\n        onChange={(e) => updateState('secretAccessKey', e.target.value)}\n        value={state.secretAccessKey} \n        style = {{width: \"50%\"}}\n      />\n      <br/>\n      <TextField\n        id=\"sessionToken\"\n        label=\"Session Token (optional)\"\n        onChange={(e) => { updateState('sessionToken', e.target.value) }}\n        value={state.sessionToken} \n        style = {{width: \"50%\"}}\n      />\n\n    <br/><br/>\n    <h3>WebRTC Configuration</h3>\n    <TextField\n        id=\"region\"\n        label=\"Region\"\n        onChange={(e) => updateState('region', e.target.value)}\n        value={state.region} \n      />\n      \n      <TextField\n        id=\"channelName\"\n        label=\"Channel name\"\n        onChange={(e) => updateState('channelName', e.target.value)}\n        value={state.channelName} \n      />\n      \n      <TextField\n        id=\"clientId\"\n        label=\"Client ID\"\n        onChange={(e) => updateState('clientId', e.target.value)}\n        value={state.clientId} \n      />\n      \n      <FormControl className={classes.formControl}>\n        <InputLabel id=\"nat-label\">NAT Traversal</InputLabel>\n        <Select\n          labelId=\"NAT-Traversal\"\n          id=\"nat-traversal\"\n          value={state.natTraversal}\n          onChange={(e) => updateState('natTraversal', e.target.value)}\n        >\n          <MenuItem value={OPTIONS.TRAVERSAL.STUN_TURN}>STUN/TURN</MenuItem>\n          <MenuItem value={OPTIONS.TRAVERSAL.TURN_ONLY}>TURN Only (force cloud relay)</MenuItem>\n          <MenuItem value={OPTIONS.TRAVERSAL.DISABLED}>Disabled</MenuItem>\n        </Select>\n      </FormControl>\n      <FormControlLabel\n        control={<Checkbox color=\"primary\" checked={state.useTrickleICE} onChange={(e) => updateState('useTrickleICE', e.target.checked) }/>}\n          label=\"Trickle ICE\"\n          labelPlacement=\"top\"\n      />\n      <FormControl className={classes.formControl}>\n        <InputLabel id=\"resolution-label\">Resolution</InputLabel>\n        <Select\n          labelId=\"resolution\"\n          id=\"resolution\"\n          value={state.resolution}\n          onChange={(e) => updateState('resolution', e.target.value)}\n        >\n          <MenuItem value={OPTIONS.RESOLUTION.WIDESCREEN}>1280x720 (16:9 widescreen)</MenuItem>\n          <MenuItem value={OPTIONS.RESOLUTION.FULLSCREEN}>640x480 (4:3 fullscreen)</MenuItem>\n\n        </Select>\n      </FormControl>\n      <FormControl className={classes.formControl}>\n        <InputLabel id=\"role-label\">Role</InputLabel>\n        <Select\n          labelId=\"role\"\n          id=\"role\"\n          value={state.role}\n          onChange={(e) => updateState('role', e.target.value)}\n        >\n          <MenuItem value={OPTIONS.ROLE.MASTER}>Master</MenuItem>\n          <MenuItem value={OPTIONS.ROLE.VIEWER}>Viewer</MenuItem>\n        </Select>\n      </FormControl>\n      <br /><br/>\n      <FormControlLabel\n        control={<Checkbox color=\"primary\" checked={state.sendVideo} onChange={(e) => updateState('sendVideo', e.target.checked) }/>}\n          label=\"Send video\"\n          labelPlacement=\"top\"\n      />\n      <FormControlLabel\n          control={<Checkbox color=\"primary\" checked={state.sendAudio} onChange={(e) => updateState('sendAudio', e.target.checked) } />}\n          label=\"Send audio\"\n          labelPlacement=\"top\"\n      />\n      <FormControlLabel\n        control={<Checkbox color=\"primary\" checked={state.openDataChannel} onChange={(e) => updateState('openDataChannel', e.target.checked) } />}\n          label=\"Data channel\"\n          labelPlacement=\"top\"\n      />\n      <br /><br />\n      { state.playerIsStarted ?\n        <Button id=\"stopPlayer\" variant=\"contained\" color=\"primary\" onClick={stopPlayer}>\n          Stop player\n        </Button>\n        :\n        <Button id=\"startPlayer\" variant=\"contained\" color=\"primary\" onClick={startPlayer}>\n          Start player\n        </Button>\n      }\n\n    </Widget>\n  );\n  \n});\n\n//------------------------------------------------------------------------------\nconst VideoPlayers = view(() => {\n\n  return (\n    <Widget>\n      <div id=\"video-players\" className=\"d-none\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <h5>Output channel</h5>\n            <div className=\"video-container\">\n              <video\n                className=\"output-view\"\n                ref={state.localView}\n                autoPlay playsInline controls muted\n              />\n            </div>\n          </div>\n\n          <div className=\"col\">\n            <h5>return Channel</h5>\n            <div className=\"video-container\">\n              <video\n                className=\"return-view\"\n                ref={state.remoteView}\n                autoPlay playsInline controls \n              />\n            </div>\n          </div>\n        </div>\n\n        <TextField\n          id=\"messageToSend\"\n          label=\"DataChannel Message\"\n          onChange={(e) => updateState('messageToSend', e.target.value)}\n          value={state.messageToSend} \n        />\n        <br/><br/>\n        <Button id=\"startPlayer\" variant=\"contained\" color=\"primary\" onClick={sendMessage}>\n        Send Message\n      </Button>\n      </div>\n      <br/><br/><br/>\n      <TextField\n          id=\"receivedMessages\"\n          label=\"received messages\"\n          value={state.receivedMessages}\n          fullWidth={true}\n          multiline={true}\n          rowsMax={10}\n          size='small'\n          disabled={true}\n          variant=\"outlined\"\n          />\n    </Widget>\n  );\n  \n});\n\n//------------------------------------------------------------------------------\nfunction startPlayer() {\n\n  state.playerIsStarted = true;\n  console.log(`role is '${state.role}'`)\n  if (state.role === OPTIONS.ROLE.MASTER) {\n    startPlayerForMaster();\n  }\n  else {\n    startPlayerForViewer();\n  }\n}\n\n//------------------------------------------------------------------------------\nasync function startPlayerForMaster() {\n  \n  // Create KVS client\n  console.log('Creating KVS client...');\n  const kinesisVideoClient = new KinesisVideo({\n    region: state.region,\n    endpoint: state.endpoint || null,\n    correctClockSkew: true,\n    accessKeyId: state.accessKey,\n    secretAccessKey: state.secretAccessKey,\n    sessionToken: state.sessionToken || null\n  });\n\n  // Get signaling channel ARN\n  console.log('Getting signaling channel ARN...');\n  const describeSignalingChannelResponse = await kinesisVideoClient\n    .describeSignalingChannel({\n        ChannelName: state.channelName,\n    })\n    .promise();\n  \n  const channelARN = describeSignalingChannelResponse.ChannelInfo.ChannelARN;\n  console.log('[MASTER] Channel ARN: ', channelARN);\n\n  // Get signaling channel endpoints:\n  console.log('Getting signaling channel endpoints...');\n  const getSignalingChannelEndpointResponse = await kinesisVideoClient\n    .getSignalingChannelEndpoint({\n        ChannelARN: channelARN,\n        SingleMasterChannelEndpointConfiguration: {\n            Protocols: ['WSS','HTTPS'],\n            Role: state.role, //roleOption.MASTER\n        },\n  })\n  .promise();\n  \n  const endpointsByProtocol = getSignalingChannelEndpointResponse.ResourceEndpointList.reduce((endpoints, endpoint) => {\n    endpoints[endpoint.Protocol] = endpoint.ResourceEndpoint;\n    return endpoints;\n  }, {});  \n  console.log('[MASTER] Endpoints: ', endpointsByProtocol);\n\n  // Create Signaling Client\n  console.log(`Creating signaling client...`);\n  state.signalingClient = new SignalingClient({\n    channelARN,\n    channelEndpoint: endpointsByProtocol.WSS,\n    role: state.role, //roleOption.MASTER\n    region: state.region,\n    systemClockOffset: kinesisVideoClient.config.systemClockOffset,\n    credentials: {\n      accessKeyId: state.accessKey,\n      secretAccessKey: state.secretAccessKey,\n      sessionToken: state.sessionToken || null\n    }\n  });\n  \n  // Get ICE server configuration\n  console.log('Creating ICE server configuration...');\n  const kinesisVideoSignalingChannelsClient = new KinesisVideoSignalingChannels({\n    region: state.region,\n    endpoint: endpointsByProtocol.HTTPS,\n    correctClockSkew: true,\n    accessKeyId: state.accessKey,\n    secretAccessKey: state.secretAccessKey,\n    sessionToken: state.sessionToken || null\n  });\n\n  console.log('Getting ICE server config...');\n  const getIceServerConfigResponse = await kinesisVideoSignalingChannelsClient\n        .getIceServerConfig({\n            ChannelARN: channelARN,\n        })\n    .promise();\n  \n  const iceServers = [];\n  if (state.natTraversal === OPTIONS.TRAVERSAL.STUN_TURN) {\n    console.log('Getting STUN servers...');\n    iceServers.push({ urls: `stun:stun.kinesisvideo.${state.region}.amazonaws.com:443` });\n  }\n  \n  if (state.natTraversal !== OPTIONS.TRAVERSAL.DISABLED) {\n    console.log('Getting TURN servers...');\n    getIceServerConfigResponse.IceServerList.forEach(iceServer =>\n      iceServers.push({\n        urls: iceServer.Uris,\n        username: iceServer.Username,\n        credential: iceServer.Password,\n      }),\n    );\n  }\n  \n  const configuration = {\n    iceServers,\n    iceTransportPolicy: (state.natTraversal === OPTIONS.TRAVERSAL.TURN_ONLY) ? 'relay' : 'all',\n  };\n\n  const resolution = (state.resolution === OPTIONS.TRAVERSAL.WIDESCREEN) ? { width: { ideal: 1280 }, height: { ideal: 720 } } : { width: { ideal: 640 }, height: { ideal: 480 } };\n\n  const constraints = {\n      video: state.sendVideo ? resolution : false,\n      audio: state.sendAudio,\n  };\n\n  // Get a stream from the webcam and display it in the local view. \n  // If no video/audio needed, no need to request for the sources. \n  // Otherwise, the browser will throw an error saying that either video or audio has to be enabled.\n  if (state.sendVideo || state.sendAudio) {\n    try {\n      console.log('Getting user media stream...');\n      state.localStream = await navigator.mediaDevices.getUserMedia(constraints);\n      state.localView.current.srcObject = state.localStream;\n      //localView.current.srcObject = appStore.master.localStream;\n\n    } catch (e) {\n      console.log('Error: ', e);\n      console.error('[MASTER] Could not find webcam');\n    }\n  }\n\n  console.log('Adding signalingClient.on open handler...');\n  state.signalingClient.on('open', async () => {\n    console.log('[MASTER] Connected to signaling service');\n  });\n\n  console.log('Adding signalingClient.on sdpOffer handler...');\n\n  state.signalingClient.on('sdpOffer', async (offer, remoteClientId) => {\n    console.log('[MASTER] Received SDP offer from client: ' + remoteClientId);\n\n    // Create a new peer connection using the offer from the given client\n    const peerConnection = new RTCPeerConnection(configuration);\n    \n    state.peerConnectionByClientId[remoteClientId] = peerConnection;\n\n    if (state.openDataChannel) {\n      console.log(`Opened data channel with ${remoteClientId}`);\n      state.dataChannelByClientId[remoteClientId] = peerConnection.createDataChannel('kvsDataChannel');\n      peerConnection.ondatachannel = event => {\n        event.channel.onmessage = (message) => {\n          const timestamp = new Date().toISOString();\n          const loggedMessage = `${timestamp} - from ${remoteClientId}: ${message.data}\\n`;\n          console.log(loggedMessage);\n          state.receivedMessages += loggedMessage;\n        };\n      };\n    }\n\n    // Poll for connection stats\n    if (!state.peerConnectionStatsInterval) {\n      state.peerConnectionStatsInterval = setInterval(() => peerConnection.getStats().then(onStatsReport), 1000);\n    }\n\n    // Send any ICE candidates to the other peer\n    peerConnection.addEventListener('icecandidate', ({ candidate }) => {\n      if (candidate) {\n        console.log('[MASTER] Generated ICE candidate for client: ' + remoteClientId);\n\n        // When trickle ICE is enabled, send the ICE candidates as they are generated.\n        if (state.useTrickleICE) {\n          console.log('[MASTER] Sending ICE candidate to client: ' + remoteClientId);\n          state.signalingClient.sendIceCandidate(candidate, remoteClientId);\n        }\n      } else {\n        console.log('[MASTER] All ICE candidates have been generated for client: ' + remoteClientId);\n\n        // When trickle ICE is disabled, send the answer now that all the ICE candidates have ben generated.\n        if (!state.useTrickleICE) {\n          console.log('[MASTER] Sending SDP answer to client: ' + remoteClientId);\n          state.signalingClient.sendSdpAnswer(peerConnection.localDescription, remoteClientId);\n        }\n      }\n    });\n  \n    // As remote tracks are received, add them to the remote view\n    console.log('Adding peerConnection listener for \"track\"...');\n    \n    peerConnection.addEventListener('track', event => {\n      console.log('[MASTER] Received remote track from client: ' + remoteClientId);\n      if (state.remoteView.current.srcObject) {\n        return;\n      }\n        \n      state.remoteView.current.srcObject = event.streams[0];\n    });\n\n    // If there's no video/audio, master.localStream will be null. So, we should skip adding the tracks from it.\n    if (state.localStream) {\n      console.log(\"There's no audio/video...\");\n      state.localStream.getTracks().forEach(track => peerConnection.addTrack(track, state.localStream));\n    }\n    await peerConnection.setRemoteDescription(offer);\n\n    // Create an SDP answer to send back to the client\n    console.log('[MASTER] Creating SDP answer for client: ' + remoteClientId);\n    await peerConnection.setLocalDescription(\n      await peerConnection.createAnswer({\n        offerToReceiveAudio: true,\n        offerToReceiveVideo: true,\n      }),\n    );\n\n    // When trickle ICE is enabled, send the answer now and then send ICE candidates as they are generated. Otherwise wait on the ICE candidates.\n    if (state.useTrickleICE) {\n      console.log('[MASTER] Sending SDP answer to client: ' + remoteClientId);\n      state.signalingClient.sendSdpAnswer(peerConnection.localDescription, remoteClientId);\n    }\n    console.log('[MASTER] Generating ICE candidates for client: ' + remoteClientId);\n\n  });\n\n  state.signalingClient.on('iceCandidate', async (candidate, remoteClientId) => {\n    console.log('[MASTER] Received ICE candidate from client: ' + remoteClientId);\n\n    // Add the ICE candidate received from the client to the peer connection\n    const peerConnection = state.peerConnectionByClientId[remoteClientId];\n    peerConnection.addIceCandidate(candidate);\n  });\n\n  state.signalingClient.on('close', () => {\n      console.log('[MASTER] Disconnected from signaling channel');\n  });\n\n  state.signalingClient.on('error', () => {\n      console.error('[MASTER] Signaling client error');\n  });\n\n  console.log('[MASTER] Starting master connection');\n  state.signalingClient.open();    \n\n}\n\n//------------------------------------------------------------------------------\nasync function startPlayerForViewer() {\n  \n  // Create KVS client\n  console.log('Created KVS client...');\n  const kinesisVideoClient = new KinesisVideo({\n    region: state.region,\n    endpoint: state.endpoint || null,\n    correctClockSkew: true,\n    accessKeyId: state.accessKey,\n    secretAccessKey: state.secretAccessKey,\n    sessionToken: state.sessionToken || null\n  });\n\n  // Get signaling channel ARN\n  console.log('Getting signaling channel ARN...');\n  const describeSignalingChannelResponse = await kinesisVideoClient\n    .describeSignalingChannel({\n        ChannelName: state.channelName,\n    })\n    .promise();\n  \n  const channelARN = describeSignalingChannelResponse.ChannelInfo.ChannelARN;\n  console.log('[VIEWER] Channel ARN: ', channelARN);\n\n  // Get signaling channel endpoints:\n  console.log('Getting signaling channel endpoints...');\n  const getSignalingChannelEndpointResponse = await kinesisVideoClient\n    .getSignalingChannelEndpoint({\n        ChannelARN: channelARN,\n        SingleMasterChannelEndpointConfiguration: {\n            Protocols: ['WSS','HTTPS'],\n            Role: state.role, //roleOption.MASTER\n        },\n  })\n  .promise();\n  \n  const endpointsByProtocol = getSignalingChannelEndpointResponse.ResourceEndpointList.reduce((endpoints, endpoint) => {\n    endpoints[endpoint.Protocol] = endpoint.ResourceEndpoint;\n    return endpoints;\n  }, {});  \n  console.log('[VIEWER] Endpoints: ', endpointsByProtocol);\n\n  // Create Signaling Client\n  console.log(`Creating signaling client...`);\n  state.signalingClient = new SignalingClient({\n    channelARN,\n    channelEndpoint: endpointsByProtocol.WSS,\n    role: state.role, //roleOption.MASTER\n    region: state.region,\n    systemClockOffset: kinesisVideoClient.config.systemClockOffset,\n    clientId: state.clientId,\n    credentials: {\n      accessKeyId: state.accessKey,\n      secretAccessKey: state.secretAccessKey,\n      sessionToken: state.sessionToken || null\n    }\n  });\n  \n  // Get ICE server configuration\n  console.log('Creating ICE server configuration...');\n  const kinesisVideoSignalingChannelsClient = new KinesisVideoSignalingChannels({\n    region: state.region,\n    endpoint: endpointsByProtocol.HTTPS,\n    correctClockSkew: true,\n    accessKeyId: state.accessKey,\n    secretAccessKey: state.secretAccessKey,\n    sessionToken: state.sessionToken || null\n  });\n\n  console.log('Getting ICE server config response...');\n  const getIceServerConfigResponse = await kinesisVideoSignalingChannelsClient\n        .getIceServerConfig({\n            ChannelARN: channelARN,\n        })\n    .promise();\n  \n  const iceServers = [];\n  if (state.natTraversal === OPTIONS.TRAVERSAL.STUN_TURN) {\n    console.log('Getting STUN servers...');\n    iceServers.push({ urls: `stun:stun.kinesisvideo.${state.region}.amazonaws.com:443` });\n  }\n  \n  if (state.natTraversal !== OPTIONS.TRAVERSAL.DISABLED) {\n    console.log('Getting TURN servers...');\n    getIceServerConfigResponse.IceServerList.forEach(iceServer =>\n      iceServers.push({\n        urls: iceServer.Uris,\n        username: iceServer.Username,\n        credential: iceServer.Password,\n      }),\n    );\n  }\n  \n  const configuration = {\n    iceServers,\n    iceTransportPolicy: (state.natTraversal === OPTIONS.TRAVERSAL.TURN_ONLY) ? 'relay' : 'all',\n  };\n\n  const resolution = (state.resolution === OPTIONS.TRAVERSAL.WIDESCREEN) ? { width: { ideal: 1280 }, height: { ideal: 720 } } : { width: { ideal: 640 }, height: { ideal: 480 } };\n\n  const constraints = {\n      video: state.sendVideo ? resolution : false,\n      audio: state.sendAudio,\n  };\n\n  state.peerConnection = new RTCPeerConnection(configuration);\n  if (state.openDataChannel) {\n      console.log(`Opened data channel with MASTER.`);\n      state.dataChannel = state.peerConnection.createDataChannel('kvsDataChannel');\n      state.peerConnection.ondatachannel = event => {\n        event.channel.onmessage = (message) => {\n          const timestamp = new Date().toISOString();\n          const loggedMessage = `${timestamp} - from MASTER: ${message.data}\\n`;\n          console.log(loggedMessage);\n          state.receivedMessages += loggedMessage;\n\n        };\n      };\n  }\n\n  // Poll for connection stats\n  state.peerConnectionStatsInterval = setInterval(\n    () => {\n      state.peerConnection.getStats().then(onStatsReport);\n    }, 1000\n  );\n\n  /// REVIEW BELOW HERE\n\n  state.signalingClient.on('open', async () => {\n    console.log('[VIEWER] Connected to signaling service');\n\n    // Get a stream from the webcam, add it to the peer connection, and display it in the local view.\n    // If no video/audio needed, no need to request for the sources. \n    // Otherwise, the browser will throw an error saying that either video or audio has to be enabled.\n    if (state.sendVideo || state.sendAudio) {\n        try {\n            state.localStream = await navigator.mediaDevices.getUserMedia(constraints);\n            state.localStream.getTracks().forEach(track => state.peerConnection.addTrack(track, state.localStream));\n            state.localView.current.srcObject = state.localStream;\n        } catch (e) {\n            console.error('[VIEWER] Could not find webcam');\n            return;\n        }\n    }\n\n    // Create an SDP offer to send to the master\n    console.log('[VIEWER] Creating SDP offer');\n    await state.peerConnection.setLocalDescription(\n        await state.peerConnection.createOffer({\n            offerToReceiveAudio: true,\n            offerToReceiveVideo: true,\n        }),\n    );\n\n    // When trickle ICE is enabled, send the offer now and then send ICE candidates as they are generated. Otherwise wait on the ICE candidates.\n    if (state.useTrickleICE) {\n        console.log('[VIEWER] Sending SDP offer');\n        state.signalingClient.sendSdpOffer(state.peerConnection.localDescription);\n    }\n    console.log('[VIEWER] Generating ICE candidates');\n});\n\nstate.signalingClient.on('sdpAnswer', async answer => {\n    // Add the SDP answer to the peer connection\n    console.log('[VIEWER] Received SDP answer');\n    await state.peerConnection.setRemoteDescription(answer);\n});\n\nstate.signalingClient.on('iceCandidate', candidate => {\n    // Add the ICE candidate received from the MASTER to the peer connection\n    console.log('[VIEWER] Received ICE candidate');\n    state.peerConnection.addIceCandidate(candidate);\n});\n\nstate.signalingClient.on('close', () => {\n    console.log('[VIEWER] Disconnected from signaling channel');\n});\n\nstate.signalingClient.on('error', error => {\n    console.error('[VIEWER] Signaling client error: ', error);\n});\n\n// Send any ICE candidates to the other peer\nstate.peerConnection.addEventListener('icecandidate', ({ candidate }) => {\n    if (candidate) {\n        console.log('[VIEWER] Generated ICE candidate');\n\n        // When trickle ICE is enabled, send the ICE candidates as they are generated.\n        if (state.useTrickleICE) {\n            console.log('[VIEWER] Sending ICE candidate');\n            state.signalingClient.sendIceCandidate(candidate);\n        }\n    } else {\n        console.log('[VIEWER] All ICE candidates have been generated');\n\n        // When trickle ICE is disabled, send the offer now that all the ICE candidates have ben generated.\n        if (!state.useTrickleICE) {\n            console.log('[VIEWER] Sending SDP offer');\n            state.signalingClient.sendSdpOffer(state.peerConnection.localDescription);\n        }\n    }\n});\n\n// As remote tracks are received, add them to the remote view\nstate.peerConnection.addEventListener('track', event => {\n    console.log('[VIEWER] Received remote track');\n    if (state.remoteView.current.srcObject) {\n        return;\n    }\n    state.remoteStream = event.streams[0];\n    state.remoteView.current.srcObject = state.remoteStream;\n});\n\nconsole.log('[VIEWER] Starting viewer connection');\nstate.signalingClient.open();\n  \n}\n\n//------------------------------------------------------------------------------\nfunction stopPlayer() {\n\n  state.playerIsStarted = false;\n  console.log(`role is '${state.role}'`)\n  if (state.role === OPTIONS.ROLE.MASTER) {\n    stopPlayerForMaster();\n  }\n  else {\n    stopPlayerForViewer();\n  }\n}\n\n//------------------------------------------------------------------------------\nfunction stopPlayerForMaster() {\n\n  console.log('[MASTER] Stopping master connection');\n  if (state.signalingClient) {\n      state.signalingClient.close();\n      state.signalingClient = null;\n  }\n\n  Object.keys(state.peerConnectionByClientId).forEach(clientId => {\n      state.peerConnectionByClientId[clientId].close();\n  });\n  state.peerConnectionByClientId = [];\n\n  if (state.localStream) {\n      state.localStream.getTracks().forEach(track => track.stop());\n      state.localStream = null;\n  }\n\n  // These two lines are in the AWS demo project, but I don't see anywhere where we actually populate remoteStreams...\n  // https://github.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-js/issues/104\n  //master.remoteStreams.forEach(remoteStream => remoteStream.getTracks().forEach(track => track.stop()));\n  //master.remoteStreams = [];\n\n  if (state.peerConnectionStatsInterval) {\n      clearInterval(state.peerConnectionStatsInterval);\n      state.peerConnectionStatsInterval = null;\n  }\n\n  if (state.localView) {\n      state.localView.current.srcObject = null;\n  }\n\n  if (state.remoteView) {\n      state.remoteView.current.srcObject = null;\n  }\n\n  if (state.dataChannelByClientId) {\n      state.dataChannelByClientId = {};\n  }\n}\n\n//------------------------------------------------------------------------------\nfunction stopPlayerForViewer() {\n\n  console.log('[VIEWER] Stopping viewer connection');\n  if (state.signalingClient) {\n    state.signalingClient.close();\n    state.signalingClient = null;\n  }\n\n  if (state.peerConnection) {\n    state.peerConnection.close();\n    state.peerConnection = null;\n  }\n\n  if (state.localStream) {\n    state.localStream.getTracks().forEach(track => track.stop());\n    state.localStream = null;\n  }\n\n  if (state.remoteStream) {\n    state.remoteStream.getTracks().forEach(track => track.stop());\n    state.remoteStream = null;\n  }\n\n  if (state.peerConnectionStatsInterval) {\n      clearInterval(state.peerConnectionStatsInterval);\n      state.peerConnectionStatsInterval = null;\n  }\n\n  if (state.localView) {\n    state.localView.current.srcObject = null;\n  }\n\n  if (state.remoteView) {\n    state.remoteView.current.srcObject = null;\n  }\n\n  if (state.dataChannel) {\n    state.dataChannel = null;\n  }\n}\n\n//------------------------------------------------------------------------------\nfunction onStatsReport(report) {\n  // TODO: Publish stats\n}\n\n//------------------------------------------------------------------------------\nfunction sendMessage() {\n  if (state.role === OPTIONS.ROLE.MASTER) {\n    Object.keys(state.dataChannelByClientId).forEach(clientId => {\n      try {\n        state.dataChannelByClientId[clientId].send(state.messageToSend);\n        console.log(`Message sent to client ${clientId}: ${state.messageToSend}`);\n      } catch (e) {\n        console.error('[MASTER] Send DataChannel: ', e.toString());\n      }\n  });\n  }\n  else {\n    if (state.dataChannel) {\n      try {\n        state.dataChannel.send(state.messageToSend);\n        console.log(`Message sent to master: ${state.messageToSend}`);\n      } catch (e) {\n          console.error('[VIEWER] Send DataChannel: ', e.toString());\n      }\n  }\n  }\n}\n\n//------------------------------------------------------------------------------\nfunction updateState(key, value) {\n  state[key] = value;\n  var localKey = `kvs-widget-${key}`;\n  //console.log(`Setting ${localKey} = `, value);\n  localStorage.setItem(localKey, value);\n}\n\n//------------------------------------------------------------------------------\nfunction getRandomClientId() {\n  return Math.random()\n      .toString(36)\n      .substring(2)\n      .toUpperCase();\n}\n\nexport default KinesisWebRTC; ","import logo from './logo.svg';\nimport './App.css';\nimport KinesisWebRTC from './components/kinesis-webrtc';\n\nfunction App() {\n  return (\n      <KinesisWebRTC/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}